####Javascript notes####

#Notation
Best Practice in writing JS, details in camelCase. In camelCase, multi-word variable names have the 
first word in lowercase and the first letter of each subsequent word is capitalized.


#Number increments
myVar++ is the equivalent of myVar = myVar + 1

inversely

myVar-- is the equivalent of myVar = myVar - 1


#Remainders in Javascript
The remainder operator % gives the remainder of the division of two numbers.
Ex:
5 % 2 = 1 because
Math.floor(5 / 2) = 2 (Quotient)
2 * 2 = 4
5 - 4 = 1 (Remainder)


#Augmented Addition
In programming, it is common to use assignments to modify the contents of a variable. 
Remember that everything to the right of the equals sign is evaluated first, so we can say:

myVar = myVar + 5;

to add 5 to myVar. Since this is such a common pattern, there are operators which do both a 
mathematical operation and assignment in one step.

One such operator is the += operator.

var myVar = 1;
myVar += 5;
console.log(myVar); // Returns 6

Augmented: 
Subtraction: var -=
Division: var /=
Multiplication: var *=


#Escape Sequences in Strings
Code:                 Output:
\'                      Single quote
\"                      double quote
\\                      backslash
\n                      new line    
\r                      carriage return
\t                      tab
\b                      backspace
\f                      form feed

#Adding strings together
ex:
var myStr = "This is the start. " + "This is the end." 

Plus Equals Operator
var myStr = "This is the first sentence. ";
myStr += "This is the second sentence.";


#Length of a String
You can find the length of a String value by writing .length 
after the string variable or string literal.
Ex:
"Cookies and Cream".length; would output to 17


#Word Blannks
function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
  var result = "";
      result+= "My "+myAdjective+" "+myNoun+" "+myVerb+" very "+myAdverb+".";

  return result;
}

// Change the words here to test your function
wordBlanks("cat", "small", "walked", "slowly");



#Arrays
--You can store multiple values within one variable using an Array
Ex:
myVar = ["Me", 23]

--You can also nest one array within another   
var myArray = [["Treston", 22], ["Ohio", 578]];

When counting Arrays start at 0. So for example:
var myArray = [50, 60, 70];

typing array[0]; would output to 50

you can also assign it to other variables as such:
var myData = myArray[2]; // output: 70

--You can also overrite Array data because unline strings, arrays are mutable
Ex:
var myArray = [50, 60, 70];
myArray[0] = 15; // output: [15, 60 ,70]


#Multi-Dimensional Arrays with Indexes
Multi-Dimensional Arrays are like inception, a dream within a dream, an array within an array.
For example: 
var arr = [
  [1,2,3],
  [4,5,6],
  [7,8,9],
  [[10,11,12], 13, 14]
];
arr[3]; // equals [[10,11,12], 13, 14]
arr[3][0]; // equals [10,11,12]
arr[3][0][1]; // equals 11

#.push()
An easy way to append data to the end of an array is via the push() function.
.push() takes one or more parameters and "pushes" them onto the end of the array.
Example:
var myArray = [1,2,3]
myArray.push(4)
// myArray is now [1,2,3,4]

More complex ex:
var myArray = [["John", 23], ["cat", 2]];
myArray.push(["dog", 3])
//myArray is now  [["John", 23], ["cat", 2], ["dog", 3]]


#Manipulating Arrays with .pop()
.pop() is used to "pop" a value off of the end of an array. 
We can store this "popped off" value by assigning it to a variable. 
In other words, .pop() removes the last element from an array and returns that element. 
Ex:
var myArray = [["John", 23], ["cat", 2]];
var removedFromMyArray = myArray.pop(["cat",2]);
// myArray is now  [["John", 23]]
// and removedFromArray is ["cat", 2]

#.shift()
.shift() removes the first item from an Array.
Ex:
var myArray = [["John", 23], ["dog", 3]];
var removedFromMyArray = myArray.shift(["John", 23]);
// myArray is now  ["dog", 3]
// and removedFromArray is ["John", 23]


#.unshift()
.unshift() works exactly like .push(), but instead of adding the element at the end of the array, 
unshift() adds the element at the beginning of the array.
Ex:

var ourArray = ["Stimpson", "J", "cat"];
ourArray.shift(); // ourArray now equals ["J", "cat"]
ourArray.unshift("Happy"); 
// ourArray now equals ["Happy", "J", "cat"]


#Functions
In JavaScript, we can divide up our code into reusable parts called functions.
Here's an example of a function:
function functionName() {
  console.log("Hello World");
}
You can call or invoke this function by using its name followed by parentheses, like this:

functionName();

Each time the function is called it will print out the message "Hello World" on the dev console. 
All of the code between the curly braces will be executed every time the function is called.
EX:

function reusableFunction() {
    console.log("Hi World")
}

reusableFunction();
// Hi World


#Parameters in functions
Parameters are variables that act as placeholders for the values that are to be input to a function when it is called. 
When a function is defined, it is typically defined along with one or more parameters. 
The actual values that are input (or "passed") into a function when it is called are known as arguments.
Ex:

function functionWithArgs(a,b) {
  console.log(a + b);
}
functionWithArgs(1, 2);
// 3

Ex2:
function testFun(param1, param2) {
  console.log(param1, param2);
}
testFun("Hello", "World");
We have passed two arguments, "Hello" and "World". Inside the function, param1 will equal "Hello" and param2 will equal "World". 
Note that you could call testFun again with different arguments and the parameters would take on the value of the new arguments.


#Global Scope and Functions
scope refers to the visibility of variables. Variables which are defined outside of a function block have Global scope. 
This means, they can be seen everywhere in your JavaScript code.
Variables which are used without the var keyword are automatically created in the global scope. 
This can create unintended consequences elsewhere in your code or when running a function again. 
You should always declare your variables with var.


#Local Scope
Variables which are declared within a function, as well as the function parameters have local scope. 
That means, they are only visible within that function.
Ex: 

function myLocalScope() {
  'use strict'; 
var myVar = "Hi";
  console.log(myVar);
}
myLocalScope(); // "Hi"
console.log(myVar); // myVar is not defined


#Global vs Local Scope
It is possible to have both local and global variables with the same name. 
When you do this, the local variable takes precedence over the global variable.
Ex:

var outerWear = "T-Shirt";

function myOutfit() {
  var outerWear = "sweater";
  return outerWear;
}

myOutfit();


#Return in Function
We can pass values into a function with arguments. You can use a return statement to send a value back out of a function.
Ex:

function timesFive(num) {
  return num * 5;
}
var answer = timesFive(2);
// 10

--Undefined Value returned from a Function
A function can include the return statement but it does not have to. 
In the case that the function doesn't have a return statement, when you call it, the function processes 
the inner code but the returned value is undefined.
Ex:

var sum = 8;
function addFive(num) {
  sum = sum + 5;
}
var returnedValue = addFive();


#Assignment with Returned Value
If you'll recall from our discussion of Storing Values with the Assignment Operator, 
everything to the right of the equal sign is resolved before the value is assigned. 
This means we can take the return value of a function and assign it to a variable.

Assume we have pre-defined a function sum which adds two numbers together, then:

ourSum = sum(5, 12);

will call sum function, which returns a value of 17 and assigns it to ourSum variable.
Ex:

var changed = 0;

function change(num) {
  return (num + 5) / 3;
}

changed = change(10); // 5


#Stand in Line
A queue is an abstract Data Structure where items are kept in order. New items can be added at the 
back of the queue and old items are taken off from the front of the queue.
Ex:

function nextInLine(arr, item) {
  arr.push(item);
  var removed = arr.shift();
  return removed; 
}

Explanation: 
- Push item at the end of arr.
- Call the shift() method on arr to get the first item and store it in removed.
- Return removed.


#Boolean Values
Booleans may only be one of two values: true or false. They are basically little on-off switches, 
where true is "on" and false is "off." These two states are mutually exclusive.
Boolean values are never written with quotes. 
The strings "true" and "false" are not Boolean and have no special meaning in JavaScript.


#Conditional If Statements
If statements are used to make decisions in code. The keyword if tells JavaScript to execute 
the code in the curly braces under certain conditions, defined in the parentheses. 
These conditions are known as Boolean conditions and they may only be true or false.

When the condition evaluates to true, the program executes the statement inside the curly braces. 
When the Boolean condition evaluates to false, the statement inside the curly braces will not execute.
Ex:
function ourTrueOrFalse(isItTrue) {
  if (isItTrue) { 
    return "Yes, it's true";
  }
  return "No, it's false";
}

// Setup
function trueOrFalse(wasThatTrue) {
  if (wasThatTrue){
    return "Yes, that was true"
  }
  return "No, that was false"
}
trueOrFalse(true); // Yes, that was true


#Comparison Operator: Equality
The most basic operator is the equality operator ==. The equality operator compares two values and 
returns true if they're equivalent or false if they are not. Note that equality is different from 
assignment (=), which assigns the value at the right of the operator to a variable in the left.
Ex:
function testEqual(val) {
  if (val == 12) { 
    return "Equal";
  }
  return "Not Equal";
}
testEqual(10); // Not Equal

In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. This is known as "Type Coercion". Once it does, however, it can compare terms as follows:

1 == 1 // true
1 == 2 // false
1 == '1' // true
"3" == 3 // true



##Strict Equality
Strict equality (===) is the counterpart to the equality operator (==). 
However, unlike the equality operator, which attempts to convert both values being compared to a common type, 
the strict equality operator does not perform a type conversion.

If the values being compared have different types, they are considered unequal, and the strict equality 
operator will return false.
Ex: 
3 === 3 // true
3 === '3' // false

In the second example, 3 is a Number type and '3' is a String type.
Code Example:
function testStrict(val) {
  if (val === 7) { 
    return "Equal";
  }
  return "Not Equal";
}
testStrict("7"); // Not Equal


##Inequality Operator
The inequality operator (!=) is the opposite of the equality operator. It means "Not Equal" and returns 
false where equality would return true and vice versa. Like the equality operator, the inequality operator 
will convert data types of values while comparing.
Examples:
1 != 2 // true
1 != "1" // false
1 != '1' // false
1 != true // false
0 != false // false

Code example:
function testNotEqual(val) {
  if (val != 99) { 
    return "Not Equal";
  }
  return "Equal";
}

testNotEqual(10); // Not Equal


##Strict Inquality Operator
The strict inequality operator (!==) is the logical opposite of the strict equality operator. 
It means "Strictly Not Equal" and returns false where strict equality would return true and vice versa. 
Strict inequality will not convert data types.
Examples:
3 !== 3 // false
3 !== '3' // true
4 !== 3 // true


#Greater Than >
The greater than operator (>) compares the values of two numbers. If the number to the left is greater 
than the number to the right, it returns true. Otherwise, it returns false.
Like the equality operator, greater than operator will convert data types of values while comparing.



##Greater Than or Equal To >=
Ex:
6 >= 6 // true
7 >= '3' // true
2 >= 3 // false
'7' >= 9 // false


#Logical and
Sometimes you will need to test more than one thing at a time. The logical and operator (&&) returns 
true if and only if the operands to the left and right of it are true.
Ex:

function testLogicalAnd(val) {
    if (val <= 50 && val >= 25) {
      return "Yes";
    }
  return "No";
}


#Comparisons with Logical Or
The logical or operator (||) returns true if either of the operands is true. Otherwise, it returns false.
Ex:

function testLogicalOr(val) {
  if (val < 10 || val > 20) {
    return "Outside";
  }
  return "Inside";
}


#Else Statements
When a condition for an if statement is true, the block of code following it is executed. 
What about when that condition is false? Normally nothing would happen. 
With an else statement, an alternate block of code can be executed.
Ex:

function testElse(val) {
  var result = ""; 
  if (val > 5) {
    result = "Bigger than 5";
  }
  else {
    result = "5 or Smaller";
  }
  return result;
}
testElse(4); // 5 or Smaller


#Else if Statements
function testElseIf(val) {
  if (val > 10) {
    return "Greater than 10";
  }
  
  else if (val < 5) {
    return "Smaller than 5";
  }
  else {
  return "Between 5 and 10";
}
}
testElseIf(7); // Between 5 and 10

-- Order is important! 
Order is important in if, else if statements.
The function is executed from top to bottom so you will want to be careful of what statement comes first.
Correct Ex:
function foo(x) {
  if (x < 1) {
    return "Less than one";
  } else if (x < 2) {
    return "Less than two";
  } else {
    return "Greater than or equal to two";
  }
}
// Less than one

Incorrect:
function bar(x) {
  if (x < 2) {
    return "Less than two";
  } else if (x < 1) {
    return "Less than one";
  } else {
    return "Greater than or equal to two";
  }
}
// Less than two

These two will have different outputs.

-- You can chain If Else Statements 
Ex:
function testSize(num) {
  if (num < 5) {
    return "Tiny";
  }
  else if (num < 10) {
    return "Small";
  }
  else if (num < 15) {
    return "Medium";
  }
else if (num < 20) {
  return "Large";
}
else if (num >= 20) {
  return "Huge";
}
else {
  return "Change Me";
}
}
testSize();


#Switch Statements
If you have many options to choose from, use a switch statement. 
A switch statement tests a value and can have many case statements which define various possible values. 
Statements are executed from the first matched case value until a break is encountered.

Ex:
switch(num) {
  case value1:
    statement1;
    break;
  case value2:
    statement2;
    break;
...
  case valueN:
    statementN;
    break;
}

A switch statement first evaluates its expression. It then looks for the first case clause whose expression evaluates 
to the same value as the result of the input expression (using the strict comparison, (===) and transfers control to 
that clause, executing the associated statements. (If multiple cases match the provided value, the first case that matches 
is selected, even if the cases are not equal to each other.)

If no matching case clause is found, the program looks for the optional default clause, and if found, transfers control to 
that clause, executing the associated statements. If no default clause is found, the program continues execution at the statement 
following the end of switch. By convention, the default clause is the last clause, but it does not need to be so.

The optional break statement associated with each case label ensures that the program breaks out of switch once the matched 
statement is executed and continues execution at the statement following switch. If break is omitted, the program continues 
execution at the next statement in the switch statement.

Ex2: 
function caseInSwitch(val) {
  var answer = "";
  switch(val) {
    case 1: 
    return "alpha";
    break;
    case 2:
    return "beta";
    break;
    case 3:
    return "gamma";
    break;
    case 4:
    return "delta";
    break;
  }
  return answer;  
}
caseInSwitch(1);

##Default Option in Switch Statements
In a switch statement you may not be able to specify all possible values as case statements. 
Instead, you can add the default statement which will be executed if no matching case statements are found. 
Think of it like the final else statement in an if/else chain.
Ex:
function switchOfStuff(val) {
  var answer = "";
  // Only change code below this line
  switch(val) {
    case 'a':
    answer = "apple";
    break;
    case 'b':
    answer = "bird";
    break;
    case 'c':
    answer = "cat";
    break;
    default:
    answer = "stuff";
    break;
  } 
  return answer;  
}
switchOfStuff(1);


-- Multiple Switch Statements
If the break statement is omitted from a switch statement's case, the following case statement(s) are executed 
until a break is encountered. 

If you have many options to choose from, a switch statement can be easier to write than many chained if/else if statements. 
Ex: The following  

if (val === 1) {                                
  answer = "a";
} else if (val === 2) {
  answer = "b";
} else {
  answer = "c";
}

can be replaced with: 

switch(val) {
  case 1:
    answer = "a";
    break;
  case 2:
    answer = "b";
    break;
  default:
    answer = "c";
}

Example 2:

function chainToSwitch(val) {
  var answer = "";
  if (val === "bob") {
    answer = "Marley";
  } else if (val === 42) {
    answer = "The Answer";
  } else if (val === 1) {
    answer = "There is no #1";
  } else if (val === 99) {
    answer = "Missed me by this much!";
  } else if (val === 7) {
    answer = "Ate Nine";
  }
  return answer;  
}

convert to:

function chainToSwitch(val) {
    var answer = "";
    switch(val) {
    case "bob":
        answer = "Marley";
        break;
    case 42: 
        answer = "The Answer";
        break;
    case 1:
        answer = "There is no #1";
        break;
    case 99:
        answer = "Missed me by this much!";
        break;
    case 7: 
        answer = "Ate Nine";
        break;
}
return answer;
}


#Returning Boolean Value
All comparison operators return a boolean true or false value.
Sometimes people use an if/else statement to do a comparison, like this:

function isEqual(a,b) {
  if (a === b) {
    return true;
  } else {
    return false;
  }
}

But there's a better way to do this. Since === returns true or false, we can return the result of the comparison:

function isEqual(a,b) {
  return a === b;
}


#Return Early Pattern for Functions
When a return statement is reached, the execution of the current function stops and control returns to the calling location.
Ex:
// Setup
function abTest(a, b) {
  if (a < 0 || b < 0)
  return undefined;

  return Math.round(Math.pow(Math.sqrt(a) + Math.sqrt(b), 2));
}

abTest(2,2);


#Objects
Objects are similar to arrays, except that instead of using indexes to access and modify their data, 
you access the data in objects through what are called properties.
Objects are useful for storing data in a structured way, and can represent real world objects, like a cat.

Here's a sample cat object:

var cat = {
  "name": "Whiskers",
  "legs": 4,
  "tails": 1,
  "enemies": ["Water", "Dogs"]
};

In this example, all the properties are stored as strings, such as - "name", "legs", and "tails". 
However, you can also use numbers as properties. You can even omit the quotes for single-word string properties, 
as follows:

var anotherObject = {
  make: "Ford",
  5: "five",
  "model": "focus"
};

However, if your object has any non-string properties, JavaScript will automatically typecast them as strings.

Example code:
Make an object that represents a dog called myDog which contains the properties "name" (a string), "legs", "tails" and "friends"
var myDog = {
  "name": "Fido",
  "legs": 4,
  "tails": 1,
  "friends": ["Owners"]
};


#Accessing Object Properties with Dot Notation
There are two ways to access the properties of an object: dot notation (.) and bracket notation ([]), similar to an array.
Dot notation is what you use when you know the name of the property you're trying to access ahead of time.
Here is a sample of using dot notation (.) to read an object's property:
var myObj = {
  prop1: "val1",
  prop2: "val2"
};
var prop1val = myObj.prop1; // val1
var prop2val = myObj.prop2; // val2

Example Code:
var testObj = {
  "hat": "ballcap",
  "shirt": "jersey",
  "shoes": "cleats"
};

var hatValue = testObj.hat;     
var shirtValue = testObj.shirt;

























